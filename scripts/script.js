require("dotenv").config();
const TelegramBot = require("node-telegram-bot-api");
const horoscopes = require("../data/horoscopes.json");
const cron = require("node-cron");
const { execFile } = require("child_process");
const fs = require("fs");
const path = require("path");

const TOKEN = process.env.TELEGRAM_TOKEN;
const bot = new TelegramBot(TOKEN, { polling: true });
const ADMIN_ID = 700953345;

function isAdmin(userId) {
  return String(userId) === String(ADMIN_ID);
}

const SIGNS = [
  { name: "–û–≤–µ–Ω", value: "aries" },
  { name: "–¢–µ–ª–µ—Ü", value: "taurus" },
  { name: "–ë–ª–∏–∑–Ω–µ—Ü—ã", value: "gemini" },
  { name: "–†–∞–∫", value: "cancer" },
  { name: "–õ–µ–≤", value: "leo" },
  { name: "–î–µ–≤–∞", value: "virgo" },
  { name: "–í–µ—Å—ã", value: "libra" },
  { name: "–°–∫–æ—Ä–ø–∏–æ–Ω", value: "scorpio" },
  { name: "–°—Ç—Ä–µ–ª–µ—Ü", value: "sagittarius" },
  { name: "–ö–æ–∑–µ—Ä–æ–≥", value: "capricorn" },
  { name: "–í–æ–¥–æ–ª–µ–π", value: "aquarius" },
  { name: "–†—ã–±—ã", value: "pisces" },
];

// –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
const USERS_FILE = path.join(__dirname, "../data/users.json");

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ —Ñ–∞–π–ª–∞
function loadUsers() {
  try {
    if (fs.existsSync(USERS_FILE)) {
      const data = fs.readFileSync(USERS_FILE, "utf8");
      return JSON.parse(data);
    }
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:", error.message);
  }
  return {};
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Ñ–∞–π–ª
function saveUsers() {
  try {
    // –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É data –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    const dataDir = path.dirname(USERS_FILE);
    if (!fs.existsSync(dataDir)) {
      fs.mkdirSync(dataDir, { recursive: true });
    }

    fs.writeFileSync(USERS_FILE, JSON.stringify(users, null, 2), "utf8");
    console.log("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª");
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:", error.message);
  }
}

// –•—Ä–∞–Ω–∏–ª–∏—â–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (userId: { sign, subscribed, notificationTime })
const users = loadUsers();
console.log(`–ó–∞–≥—Ä—É–∂–µ–Ω–æ ${Object.keys(users).length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`);

function getSignsKeyboard(prefix = "setsign_") {
  const rows = [];
  for (let i = 0; i < SIGNS.length; i += 3) {
    rows.push(
      SIGNS.slice(i, i + 3).map((sign) => ({
        text: sign.name,
        callback_data: prefix + sign.value,
      }))
    );
  }
  return { inline_keyboard: rows };
}

function getTimeKeyboard() {
  const times = [
    "01:00",
    "07:00",
    "08:00",
    "09:00",
    "10:00",
    "11:00",
    "12:00",
    "13:00",
    "14:00",
    "15:00",
    "16:00",
    "17:00",
    "18:00",
    "19:00",
    "20:00",
    "21:00",
    "22:00",
    "23:00",
  ];

  const rows = [];
  for (let i = 0; i < times.length; i += 3) {
    rows.push(
      times.slice(i, i + 3).map((time) => ({
        text: time,
        callback_data: "settime_" + time,
      }))
    );
  }
  return { inline_keyboard: rows };
}

function getMenuKeyboard() {
  return {
    keyboard: [
      [{ text: "/today" }, { text: "/setmyhoroscope" }],
      [{ text: "/subscribe" }, { text: "/unsubscribe" }],
      [{ text: "/settime" }, { text: "/all" }],
      [{ text: "/help" }],
    ],
    resize_keyboard: true,
    one_time_keyboard: false,
  };
}

function getHoroscope(sign) {
  return horoscopes[sign] || "–ì–æ—Ä–æ—Å–∫–æ–ø –Ω–µ –Ω–∞–π–¥–µ–Ω!";
}

// /start
bot.onText(/\/start/, (msg) => {
  users[msg.from.id] = users[msg.from.id] || { sign: null, subscribed: false };
  bot.sendMessage(
    msg.chat.id,
    "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞-–≥–æ—Ä–æ—Å–∫–æ–ø!\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ–π –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞ —á–µ—Ä–µ–∑ /setmyhoroscope –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.",
    { reply_markup: getMenuKeyboard() }
  );
});

// /help
bot.onText(/\/help/, (msg) => {
  bot.sendMessage(
    msg.chat.id,
    `–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n\n/start ‚Äî –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É\n/help ‚Äî —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥\n/today ‚Äî –≥–æ—Ä–æ—Å–∫–æ–ø –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –¥–ª—è –≤–∞—à–µ–≥–æ –∑–Ω–∞–∫–∞\n/setmyhoroscope ‚Äî –≤—ã–±—Ä–∞—Ç—å —Å–≤–æ–π –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞\n/settime ‚Äî —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π\n/subscribe ‚Äî –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é —Ä–∞—Å—Å—ã–ª–∫—É\n/unsubscribe ‚Äî –æ—Ç–º–µ–Ω–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É\n/menu ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏\n/test-update ‚Äî —Ç–µ—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≥–æ—Ä–æ—Å–∫–æ–ø–æ–≤ (–¥–ª—è –∞–¥–º–∏–Ω–∞)\n/stats ‚Äî —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–¥–ª—è –∞–¥–º–∏–Ω–∞)`
  );
});

// /menu
bot.onText(/\/menu/, (msg) => {
  bot.sendMessage(msg.chat.id, "–ú–µ–Ω—é:", { reply_markup: getMenuKeyboard() });
});

// /setmyhoroscope
bot.onText(/\/setmyhoroscope/, (msg) => {
  bot.sendMessage(msg.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞:", {
    reply_markup: getSignsKeyboard(),
  });
});

// /settime
bot.onText(/\/settime/, (msg) => {
  const user = users[msg.from.id];
  const currentTime = user ? user.notificationTime || "08:00" : "08:00";

  bot.sendMessage(
    msg.chat.id,
    `‚è∞ –í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π\n\n–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: *${currentTime}* –ø–æ –ú–æ—Å–∫–≤–µ`,
    {
      reply_markup: getTimeKeyboard(),
      parse_mode: "Markdown",
    }
  );
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∑–Ω–∞–∫–∞
bot.on("callback_query", async (query) => {
  const chatId = query.message.chat.id;
  const userId = query.from.id;
  if (query.data.startsWith("setsign_")) {
    const sign = query.data.replace("setsign_", "");
    users[userId] = users[userId] || {
      sign: null,
      subscribed: false,
      notificationTime: "08:00",
    };
    users[userId].sign = sign;
    saveUsers(); // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
    bot.answerCallbackQuery(query.id, { text: "–ó–Ω–∞–∫ —Å–æ—Ö—Ä–∞–Ω—ë–Ω!" });
    bot.sendMessage(
      chatId,
      `–í–∞—à –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞: *${SIGNS.find((s) => s.value === sign).name}*`,
      { parse_mode: "Markdown" }
    );
    return;
  }

  if (query.data.startsWith("settime_")) {
    const time = query.data.replace("settime_", "");
    users[userId] = users[userId] || {
      sign: null,
      subscribed: false,
      notificationTime: "08:00",
    };
    users[userId].notificationTime = time;
    saveUsers(); // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
    bot.answerCallbackQuery(query.id, { text: "–í—Ä–µ–º—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!" });
    bot.sendMessage(
      chatId,
      `‚è∞ –í—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ *${time}* –ø–æ –ú–æ—Å–∫–≤–µ`,
      { parse_mode: "Markdown" }
    );
    return;
  }
});

// /today
bot.onText(/\/today/, async (msg) => {
  const user = users[msg.from.id];
  if (!user || !user.sign) {
    bot.sendMessage(msg.chat.id, "–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –∑–Ω–∞–∫ —á–µ—Ä–µ–∑ /setmyhoroscope");
    return;
  }
  const signObj = SIGNS.find((s) => s.value === user.sign);
  const desc = getHoroscope(user.sign);
  bot.sendMessage(msg.chat.id, `*${signObj.name}*\n${desc}`, {
    parse_mode: "Markdown",
  });
});

// /subscribe
bot.onText(/\/subscribe/, (msg) => {
  users[msg.from.id] = users[msg.from.id] || {
    sign: null,
    subscribed: false,
    notificationTime: "08:00",
  };
  if (!users[msg.from.id].sign) {
    bot.sendMessage(msg.chat.id, "–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –∑–Ω–∞–∫ —á–µ—Ä–µ–∑ /setmyhoroscope");
    return;
  }
  users[msg.from.id].subscribed = true;
  saveUsers(); // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
  scheduleUserNotifications(); // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
  bot.sendMessage(
    msg.chat.id,
    "–í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é —Ä–∞—Å—Å—ã–ª–∫—É –≥–æ—Ä–æ—Å–∫–æ–ø–∞!"
  );
});

// /unsubscribe
bot.onText(/\/unsubscribe/, (msg) => {
  users[msg.from.id] = users[msg.from.id] || {
    sign: null,
    subscribed: false,
    notificationTime: "08:00",
  };
  users[msg.from.id].subscribed = false;
  saveUsers(); // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
  scheduleUserNotifications(); // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
  bot.sendMessage(msg.chat.id, "–í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏.");
});

// /stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–¥–ª—è –∞–¥–º–∏–Ω–∞)
bot.onText(/\/stats/, (msg) => {
  if (!isAdmin(msg.from.id)) {
    bot.sendMessage(msg.chat.id, "‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω");
    return;
  }
  const totalUsers = Object.keys(users).length;
  const subscribedUsers = Object.values(users).filter(
    (user) => user.subscribed
  ).length;
  const usersWithSigns = Object.values(users).filter(
    (user) => user.sign
  ).length;

  const stats = `üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:\n\nüë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${totalUsers}\n‚úÖ –° –≤—ã–±—Ä–∞–Ω–Ω—ã–º –∑–Ω–∞–∫–æ–º: ${usersWithSigns}\nüìß –ü–æ–¥–ø–∏—Å–∞–Ω–Ω—ã—Ö –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É: ${subscribedUsers}`;

  bot.sendMessage(msg.chat.id, stats);
});

// /test-update - —Ç–µ—Å—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω)
bot.onText(/\/test-update/, (msg) => {
  if (!isAdmin(msg.from.id)) {
    bot.sendMessage(msg.chat.id, "‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω");
    return;
  }
  console.log("–¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—É—Å–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≥–æ—Ä–æ—Å–∫–æ–ø–æ–≤...");
  execFile(
    process.execPath,
    [path.join(__dirname, "update_horoscopes.js")],
    { cwd: __dirname },
    (err, stdout, stderr) => {
      if (err) {
        console.error("–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:", err);
        bot.sendMessage(msg.chat.id, "‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: " + err.message);
      } else {
        console.log("–¢–µ—Å—Ç–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ:", stdout);
        // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –ø–∞–º—è—Ç–∏
        try {
          delete require.cache[require.resolve("../data/horoscopes.json")];
          Object.assign(horoscopes, require("../data/horoscopes.json"));
          console.log("–î–∞–Ω–Ω—ã–µ –≥–æ—Ä–æ—Å–∫–æ–ø–æ–≤ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω—ã –≤ –ø–∞–º—è—Ç–∏");
          bot.sendMessage(msg.chat.id, "‚úÖ –ì–æ—Ä–æ—Å–∫–æ–ø—ã —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!");
        } catch (e) {
          console.error("–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:", e.message);
          bot.sendMessage(
            msg.chat.id,
            "‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: " + e.message
          );
        }
      }
    }
  );
});

// /all
bot.onText(/\/all/, async (msg) => {
  let texts = [];
  for (const s of SIGNS) {
    const desc = getHoroscope(s.value);
    texts.push(`*${s.name}*: ${desc}`);
  }
  // –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ 3500 —Å–∏–º–≤–æ–ª–æ–≤ (—á—Ç–æ–±—ã –Ω–µ –ø—Ä–µ–≤—ã—à–∞—Ç—å –ª–∏–º–∏—Ç Telegram)
  let message = "";
  for (const t of texts) {
    if ((message + "\n\n" + t).length > 3500) {
      await bot.sendMessage(msg.chat.id, message, { parse_mode: "Markdown" });
      message = t;
    } else {
      message += (message ? "\n\n" : "") + t;
    }
  }
  if (message) {
    await bot.sendMessage(msg.chat.id, message, { parse_mode: "Markdown" });
  }
});

// –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ —Å –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–º –≤—Ä–µ–º–µ–Ω–µ–º
function scheduleUserNotifications() {
  // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
  if (global.userSchedules) {
    Object.values(global.userSchedules).forEach((job) => job.cancel());
  }
  global.userSchedules = {};

  // –°–æ–∑–¥–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  for (const userId in users) {
    const user = users[userId];
    if (user.subscribed && user.sign && user.notificationTime) {
      const [hour, minute] = user.notificationTime.split(":").map(Number);

      const job = cron.schedule(
        `${minute} ${hour} * * *`,
        async () => {
          try {
            const signObj = SIGNS.find((s) => s.value === user.sign);
            const desc = getHoroscope(user.sign);
            await bot.sendMessage(userId, `*${signObj.name}*\n${desc}`, {
              parse_mode: "Markdown",
            });
            console.log(
              `–û—Ç–ø—Ä–∞–≤–ª–µ–Ω –≥–æ—Ä–æ—Å–∫–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${userId} –≤ ${user.notificationTime}`
            );
          } catch (error) {
            console.error(
              `–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≥–æ—Ä–æ—Å–∫–æ–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${userId}:`,
              error.message
            );
          }
        },
        {
          timezone: "Europe/Moscow",
        }
      );

      global.userSchedules[userId] = job;
      console.log(
        `–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId} –Ω–∞ ${user.notificationTime}`
      );
    }
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
scheduleUserNotifications();

// –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≥–æ—Ä–æ—Å–∫–æ–ø–æ–≤ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 00:30 –ø–æ –ú–æ—Å–∫–≤–µ
cron.schedule(
  "30 0 * * *",
  () => {
    console.log("–ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≥–æ—Ä–æ—Å–∫–æ–ø–æ–≤...");
    execFile(
      process.execPath,
      [path.join(__dirname, "update_horoscopes.js")],
      { cwd: __dirname },
      (err, stdout, stderr) => {
        if (err) {
          console.error("–û—à–∏–±–∫–∞ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≥–æ—Ä–æ—Å–∫–æ–ø–æ–≤:", err);
        } else {
          console.log("–ì–æ—Ä–æ—Å–∫–æ–ø—ã —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã:", stdout);
          // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –ø–∞–º—è—Ç–∏
          try {
            delete require.cache[require.resolve("../data/horoscopes.json")];
            Object.assign(horoscopes, require("../data/horoscopes.json"));
            console.log("–î–∞–Ω–Ω—ã–µ –≥–æ—Ä–æ—Å–∫–æ–ø–æ–≤ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω—ã –≤ –ø–∞–º—è—Ç–∏");
          } catch (e) {
            console.error("–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:", e.message);
          }
        }
      }
    );
  },
  {
    timezone: "Europe/Moscow",
  }
);

console.log("–ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≥–æ—Ä–æ—Å–∫–æ–ø–æ–≤ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ –Ω–∞ 00:30 –ø–æ –ú–æ—Å–∫–≤–µ");
